{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport let InspectorRowComponent = /*#__PURE__*/(() => {\n  class InspectorRowComponent {\n    constructor() {\n      this.onInputChangeEmitter = new EventEmitter();\n    }\n\n    onInputChange(e) {\n      // when <input> is changed, emit an Object up, with what property changed, and to what new value\n      this.onInputChangeEmitter.emit({\n        prop: this.id,\n        newVal: e.target.value\n      });\n    }\n\n  }\n\n  InspectorRowComponent.ɵfac = function InspectorRowComponent_Factory(t) {\n    return new (t || InspectorRowComponent)();\n  };\n\n  InspectorRowComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: InspectorRowComponent,\n    selectors: [[\"app-inspector-row\"]],\n    inputs: {\n      id: \"id\",\n      value: \"value\"\n    },\n    outputs: {\n      onInputChangeEmitter: \"onInputChangeEmitter\"\n    },\n    decls: 4,\n    vars: 2,\n    consts: [[3, \"ngModel\", \"change\"]],\n    template: function InspectorRowComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"td\");\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"td\");\n        i0.ɵɵelementStart(3, \"input\", 0);\n        i0.ɵɵlistener(\"change\", function InspectorRowComponent_Template_input_change_3_listener($event) {\n          return ctx.onInputChange($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.id);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.value);\n      }\n    },\n    styles: [\"\"]\n  });\n  return InspectorRowComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}